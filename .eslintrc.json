{
  "root": true,
  "ignorePatterns": ["**/*"],
  "plugins": ["@nrwl/nx"],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
      "rules": {
        "@nrwl/nx/enforce-module-boundaries": [
          "error",
          {
            "enforceBuildableLibDependency": true,
            "allow": [],
            "depConstraints": [
              {
                "sourceTag": "*",
                "onlyDependOnLibsWithTags": ["*"]
              }
            ]
          }
        ]
      }
    },
    {
      "files": ["*.ts", "*.tsx"],
      "extends": ["plugin:@nrwl/nx/typescript"],
      "rules": {}
    },
    {
      "files": ["*.js", "*.jsx"],
      "extends": ["plugin:@nrwl/nx/javascript"],
      "rules": {}
    },
    {
      "files": ["*.ts"],
      "extends": ["plugin:@nrwl/nx/typescript"],
      "rules": {
        "@angular-eslint/no-conflicting-lifecycle": "error",
        "@angular-eslint/no-host-metadata-property": "error",
        "@angular-eslint/no-input-rename": "error",
        "@angular-eslint/no-inputs-metadata-property": "error",
        "@angular-eslint/no-output-native": "error",
        "@angular-eslint/no-output-on-prefix": "error",
        "@angular-eslint/no-output-rename": "error",
        "@angular-eslint/no-outputs-metadata-property": "error",
        "@angular-eslint/use-lifecycle-interface": "error",
        "@angular-eslint/use-pipe-transform-interface": "error",
        "@typescript-eslint/consistent-type-definitions": "error",
        "@typescript-eslint/explicit-function-return-type": "error",
        "@typescript-eslint/no-explicit-any": "error",
        "@typescript-eslint/no-namespace": "off",
        "@typescript-eslint/dot-notation": "off",
        "@typescript-eslint/explicit-member-accessibility": [
          "off",
          {
            "accessibility": "explicit"
          }
        ],
        "@typescript-eslint/member-ordering": "error",
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": ["function"],
            "format": ["strictCamelCase"]
          },
          {
            "selector": "interface",
            "format": ["strictCamelCase", "snake_case", "StrictPascalCase"]
          },
          {
            "selector": "variable",
            "modifiers": ["const"],
            "format": ["strictCamelCase", "UPPER_CASE", "StrictPascalCase"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "typeProperty",
            "leadingUnderscore": "allow",
            "format": ["strictCamelCase", "snake_case"],
            "filter": {
              "regex": "[a-z]{2}_[A-Z]{2}",
              "match": false
            }
          },
          {
            "selector": "variable",
            "types": ["boolean"],
            "format": ["StrictPascalCase"],
            "prefix": [
              "are",
              "is",
              "should",
              "has",
              "can",
              "did",
              "will",
              "prefers",
              "show"
            ]
          }
        ],
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-empty-interface": "error",
        "@typescript-eslint/no-inferrable-types": [
          "error",
          {
            "ignoreParameters": true
          }
        ],
        "@typescript-eslint/no-magic-numbers": [
          "error",
          {
            "ignore": [-1, 0, 1],
            "ignoreArrayIndexes": true,
            "ignoreEnums": true
          }
        ],
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/no-shadow": [
          "error",
          {
            "hoist": "all"
          }
        ],
        "@typescript-eslint/no-unused-expressions": "error",
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "ignoreRestSiblings": true
          }
        ],
        "@typescript-eslint/prefer-includes": "warn",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/unified-signatures": "error",
        "arrow-body-style": "error",
        "comma-dangle": ["error", "always-multiline"],
        "complexity": ["error", 4],
        "constructor-super": "error",
        "curly": "error",
        "eqeqeq": ["error", "smart"],
        "guard-for-in": "error",
        "import/no-deprecated": "warn",
        "import/order": "error",
        "max-depth": ["error", 2],
        "max-len": [
          "error",
          {
            "code": 140,
            "ignoreComments": true,
            "ignoreRegExpLiterals": true,
            "ignoreStrings": true,
            "ignoreTrailingComments": true,
            "ignoreUrls": true,
            "tabWidth": 4
          }
        ],
        "max-lines": [
          "error",
          {
            "max": 300,
            "skipBlankLines": true,
            "skipComments": true
          }
        ],
        "max-lines-per-function": [
          "error",
          {
            "max": 30,
            "skipBlankLines": true,
            "skipComments": true
          }
        ],
        "no-bitwise": "error",
        "no-caller": "error",
        "no-console": [
          "error",
          {
            "allow": ["info", "warn", "error"]
          }
        ],
        "no-debugger": "error",
        "no-else-return": "error",
        "no-empty": "error",
        "no-eval": "error",
        "no-fallthrough": "error",
        "no-new-wrappers": "error",
        "no-throw-literal": "error",
        "no-undef-init": "error",
        "no-underscore-dangle": "off",
        "no-var": "error",
        "object-curly-spacing": ["error", "always"],
        "prefer-const": "error",
        "quotes": ["error", "single"],
        "radix": "error"
      },
      "plugins": [
        "eslint-plugin-import",
        "@angular-eslint/eslint-plugin",
        "@typescript-eslint"
      ]
    },
    {
      "files": ["*.spec.ts", "*.spec.tsx", "*.spec.js", "*.spec.jsx"],
      "env": {
        "jest": true
      },
      "rules": {
        "max-lines-per-function": "off"
      }
    },
    {
      "files": ["*.stories.ts", "*.cy.ts"],
      "rules": {
        "max-lines": "off",
        "max-lines-per-function": "off"
      }
    },
    {
      "files": ["*.html"],
      "rules": {
        "@angular-eslint/template/banana-in-box": "error",
        "@angular-eslint/template/no-negated-async": "error",
        "@angular-eslint/template/eqeqeq": "error"
      },
      "plugins": ["@angular-eslint/eslint-plugin-template"]
    }
  ]
}
